

/* Create Tables */

-- アカウントを管理するテーブル
CREATE TABLE ACCOUNTS
(
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'アカウントID : アカウントのid',
	NAME VARCHAR(30) NOT NULL COMMENT 'アカウント名 : アカウント名',
	UNIQ_NAME VARCHAR(255) NOT NULL UNIQUE COMMENT 'アカウントのユニーク名 : @の後に続くアカウントのid
検索等に使われる',
	WEB_SITE_URL TEXT COMMENT 'ウェブサイトURL : ウロフィールに載せるwebのurl',
	DESCRIPTION VARCHAR(255) COMMENT 'プロフィール文 : プロフィールに載せる文章',
	ICON_PATH TEXT NOT NULL COMMENT 'アイコンURL : ユーザのアイコンのパス',
	CREATED_AT DATETIME NOT NULL COMMENT '作成された時間',
	UPDATED_AT DATETIME NOT NULL COMMENT '更新された時間',
	PRIMARY KEY (ID)
) ENGINE = InnoDB COMMENT = 'アカウントテーブル : アカウントを管理するテーブル';


-- フォローフォロワー関係を管理するテーブル
CREATE TABLE ACCOUNT_FOLLOWS
(
	ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'フォローフォロワー関係のID',
	ACCOUNT_ID BIGINT UNSIGNED NOT NULL COMMENT 'フォローしているのアカウントID : フォローしたユーザのID',
	FOLLOWING_ACCOUNT_ID BIGINT UNSIGNED NOT NULL COMMENT 'フォローされたアカウントID : フォローされたユーザのid',
	CREATED_AT DATETIME NOT NULL COMMENT '作成された時間',
	UPDATED_AT DATETIME NOT NULL COMMENT '更新された時間',
	PRIMARY KEY (ID)
) ENGINE = InnoDB COMMENT = 'フォロー関係テーブル : フォローフォロワー関係を管理するテーブル';


-- ユーザがどのツイートにいいねしたかを管理するテーブル
CREATE TABLE ACCOUNT_LIKES
(
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	TWEET_ID BIGINT UNSIGNED NOT NULL COMMENT ' : いいねされたツイートのid',
	LIKED_ACCOUNT_ID BIGINT UNSIGNED NOT NULL COMMENT 'ユーザID : ツイートにいいねしたユーザのid',
	CREATED_AT DATETIME NOT NULL COMMENT '作成日',
	UPDATED_AT DATETIME NOT NULL COMMENT '更新日',
	PRIMARY KEY (ID)
) ENGINE = InnoDB COMMENT = 'ツイートへのいいね管理テーブル : ユーザがどのツイートにいいねしたかを管理するテーブル';


-- ユーザがどのツイートに対してリツイートをしたのかを管理するテーブル
CREATE TABLE ACCOUNT_RETWEETS
(
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT ' : ユーザのid
',
	ACCOUNT_ID BIGINT UNSIGNED NOT NULL COMMENT 'ユーザID : リツイートしたユーザのid',
	TWEET_ID BIGINT UNSIGNED NOT NULL COMMENT ' : リツイートしたtweet_id',
	BODY VARCHAR(144) COMMENT ' : リツイートする際の文章',
	CREATED_AT DATETIME NOT NULL COMMENT '作成日',
	UPDATED_AT DATETIME NOT NULL COMMENT '更新日',
	PRIMARY KEY (ID)
) ENGINE = InnoDB COMMENT = 'リツート管理テーブル : ユーザがどのツイートに対してリツイートをしたのかを管理するテーブル';


-- どのユーザがどのツイートをしたのかを管理するテーブル
-- USERとTWEETSの中間テーブル
CREATE TABLE ACCOUNT_TWEETS
(
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	ACCOUNT_ID BIGINT UNSIGNED NOT NULL COMMENT 'ユーザID : ツイートしたユーザのid',
	TWEET_ID BIGINT UNSIGNED NOT NULL COMMENT ' : ユーザがツイートした時のid',
	UPDATED_AT DATETIME NOT NULL,
	CREATED_AT DATETIME NOT NULL,
	PRIMARY KEY (ID)
) ENGINE = InnoDB COMMENT = 'ユーザとツイートの関連テーブル : どのユーザがどのツイートをしたのかを管理するテーブル
USERとTWEETSの中間テーブル';


-- ツイートを管理するテーブル
CREATE TABLE TWEETS
(
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	BODY VARCHAR(144) NOT NULL COMMENT ' : ツイートの文章',
	DEVICE_TYPE INT UNSIGNED NOT NULL COMMENT ' : ツイートしたデバイスのタイプ',
	CREATED_AT DATETIME NOT NULL COMMENT '作成日',
	UPDATED_AT DATETIME NOT NULL COMMENT '更新日',
	PRIMARY KEY (ID)
) ENGINE = InnoDB COMMENT = 'ツイートテーブル : ツイートを管理するテーブル';


-- ツイートに対して投稿された画像のパスを紐づけるテーブル
-- seqでシーケンス番号(順番)を管理している
CREATE TABLE TWEET_IMAGES
(
	ID BIGINT NOT NULL AUTO_INCREMENT,
	TWEET_ID BIGINT UNSIGNED NOT NULL COMMENT ' : 画像が紐づくツイートのid',
	IMAGE_PATH TEXT NOT NULL COMMENT ' : ツイートに紐づく画像のurl',
	SEQ INT NOT NULL COMMENT ' : ツイートに載せる画像の順番',
	CREATED_AT DATETIME NOT NULL COMMENT '作成日',
	UPDATED_AT DATETIME NOT NULL COMMENT '更新日',
	PRIMARY KEY (ID)
) ENGINE = InnoDB COMMENT = '画像のツイート管理テーブル : ツイートに対して投稿された画像のパスを紐づけるテーブル
seqでシーケンス番号(順番)を管理している';


-- ユーザがどのツイート・リツイート・リプに対して返信をしたか管理するテーブル
-- typeとreply_parent_idで返信先が決まる
-- reply_parent_idのdescに例がある
CREATE TABLE TWEET_REPLIES
(
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	REPLY_USER_ID BIGINT UNSIGNED NOT NULL COMMENT 'ユーザID : ツイートに返信したユーザのid',
	SEQ INT UNSIGNED NOT NULL COMMENT ' : 返信の順番',
	REPLY_PARENT_ID INT UNSIGNED NOT NULL COMMENT ' : 返信したツイートのid
typeと連動している
例 : 
type : 1、reply_parent_id  : 1
tweet_id 1のスレッドに対して返信

type : 2、reply_parent_id  : 1
retweet_id 1 のスレッドに対しての返信

type : 3、reply_parent_id  : 1
replies_id 1にたいしての返信
返信に対しての返信',
	TYPE INT UNSIGNED NOT NULL COMMENT ' : 返信したスレッドのタイプ
1 → tweet thread
2 → retweet thread
3 → reply thread',
	CREATED_AT DATETIME NOT NULL,
	UPDATED_AT DATETIME NOT NULL,
	PRIMARY KEY (ID)
) ENGINE = InnoDB COMMENT = 'ツイートへの返信管理テーブル : ユーザがどのツイート・リツイート・リプに対して返信をしたか管理するテーブル
typeとreply_parent_idで返信先が決まる
reply_parent_idのdescに例がある';


-- ユーザを管理するテーブル
CREATE TABLE USERS
(
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ユーザID : ユーザのid
',
	EMAIL VARCHAR(255) NOT NULL COMMENT 'メールアドレス : ユーザのメールアドレス',
	PASSWORD VARCHAR(15) NOT NULL COMMENT 'パスワード : ユーザのパスワード',
	TOKEN VARCHAR(31) NOT NULL UNIQUE COMMENT 'トークン : ユーザのトークン',
	CREATED_AT DATETIME NOT NULL COMMENT '作成された時間',
	UPDATED_AT DATETIME NOT NULL COMMENT '更新された時間',
	PRIMARY KEY (ID)
) ENGINE = InnoDB COMMENT = 'ユーザテーブル : ユーザを管理するテーブル';


-- ユーザとアカウントの関連テーブル
CREATE TABLE USER_ACCOUNTS
(
	ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'アカウントID : アカウントのid
',
	USER_ID BIGINT UNSIGNED NOT NULL COMMENT 'ユーザID : アカウントを所有しているユーザのid',
	ACCOUNT_ID BIGINT UNSIGNED NOT NULL COMMENT '所持アカウントID : ユーザの所有しているアカウントid',
	UPDATE_AT DATETIME NOT NULL COMMENT '更新された時間',
	CREATE_AT DATETIME NOT NULL COMMENT '作成された時間',
	SIGNED_IN_AT DATETIME NOT NULL COMMENT '直前サインイン時間 : アカウントのログインした時間',
	PRIMARY KEY (ID)
) ENGINE = InnoDB COMMENT = 'ユーザとアカウント関連テーブル : ユーザとアカウントの関連テーブル';



/* Create Indexes */

CREATE UNIQUE INDEX UQ_ACCOUNTS_ID USING BTREE ON ACCOUNTS (ID ASC);
CREATE UNIQUE INDEX UQ_ACCOUNTS_DISPLAY_ID USING BTREE ON ACCOUNTS (UNIQ_NAME ASC);
CREATE UNIQUE INDEX UQ_USER_FOLLOWS_XXX USING BTREE ON ACCOUNT_FOLLOWS (ID ASC);
CREATE UNIQUE INDEX UQ_TWEET_LIKES_TWEET_ID_LIKED_USER_ID ON ACCOUNT_LIKES (TWEET_ID ASC, LIKED_ACCOUNT_ID ASC);
CREATE UNIQUE INDEX UQ_USER_RETWEET_USER_ID_RETWEET_ID ON ACCOUNT_RETWEETS (ACCOUNT_ID ASC, TWEET_ID ASC);
CREATE UNIQUE INDEX UQ_USER_TWEETS_USER_ID_TWEET_ID ON ACCOUNT_TWEETS (ACCOUNT_ID ASC, TWEET_ID ASC);
-- ユーザのメールアドレス
CREATE UNIQUE INDEX UQ_USERS_EMAIL USING BTREE ON USERS (EMAIL DESC);
CREATE INDEX UQ_USERS_TOKEN USING BTREE ON USERS (TOKEN ASC);
CREATE UNIQUE INDEX UQ_USER_ACCOUNTS_ID USING BTREE ON USER_ACCOUNTS (ID ASC);



/* Create Foreign Keys */

ALTER TABLE ACCOUNT_FOLLOWS
	ADD CONSTRAINT FK_USER_FOLLOWS_ACCOUNTS FOREIGN KEY (ACCOUNT_ID)
	REFERENCES ACCOUNTS (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ACCOUNT_FOLLOWS
	ADD CONSTRAINT FK_USER_FOLLOWS_ACCOUNTS_FOLLOWS FOREIGN KEY (FOLLOWING_ACCOUNT_ID)
	REFERENCES ACCOUNTS (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ACCOUNT_LIKES
	ADD CONSTRAINT FK_ACCOUNT_LIKES_ACCOUNTS FOREIGN KEY (LIKED_ACCOUNT_ID)
	REFERENCES ACCOUNTS (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ACCOUNT_RETWEETS
	ADD CONSTRAINT FK_ACCOUNT_RETWEETS_ACCOUNTS FOREIGN KEY (ACCOUNT_ID)
	REFERENCES ACCOUNTS (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ACCOUNT_TWEETS
	ADD CONSTRAINT FK_ACCOUNT_TWEETS_ACCOUNTS FOREIGN KEY (ACCOUNT_ID)
	REFERENCES ACCOUNTS (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE USER_ACCOUNTS
	ADD CONSTRAINT FK_USER_ACCOUNTS_ACCOUNTS FOREIGN KEY (ACCOUNT_ID)
	REFERENCES ACCOUNTS (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ACCOUNT_LIKES
	ADD CONSTRAINT FK_TWEET_LIKES_TWIEETS FOREIGN KEY (TWEET_ID)
	REFERENCES TWEETS (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ACCOUNT_RETWEETS
	ADD CONSTRAINT FK_USER_RETWEET_TWIEETS FOREIGN KEY (TWEET_ID)
	REFERENCES TWEETS (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ACCOUNT_TWEETS
	ADD CONSTRAINT FK_USER_TWEETS_TWIEETS FOREIGN KEY (TWEET_ID)
	REFERENCES TWEETS (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE TWEET_IMAGES
	ADD CONSTRAINT FK_TWEET_IMAGES_TWIEETS FOREIGN KEY (TWEET_ID)
	REFERENCES TWEETS (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE USER_ACCOUNTS
	ADD CONSTRAINT FK_USER_ACCOUNTS_USERS FOREIGN KEY (USER_ID)
	REFERENCES USERS (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



